openapi: 3.0.0
info:
  title: E-commerce API
  description: This is the API documentation for the E-commerce application.
  version: 1.0.0
  contact:
    name: Rajmund Tak√°cs
    email: rajmi@rajmi.com
    url: http://rajmi.com
servers:
  - url: http://localhost:3000
    description: Local server

paths:
 # --- Products Routes ---
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve all products available in the catalog.
      operationId: getAllProducts
      responses:
        '200':
          description: A list of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Error fetching products

    post:
      tags:
        - Products
      summary: Add a new product
      operationId: addProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Missing required fields
        '500':
          description: Error creating product

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a specific product by ID
      description: Retrieve details for a specific product by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product
          schema:
            type: integer
      responses:
        '200':
          description: A single product and its details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Error fetching product

    put:
      tags:
        - Products
      summary: Update a product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Error updating product

    delete:
      tags:
        - Products
      summary: Delete a product by ID
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
        '500':
          description: Error deleting product

  /products/category/{category}:
    get:
      tags:
        - Products
      summary: Get products by category
      operationId: getProductsByCategory
      parameters:
        - name: category
          in: path
          required: true
          description: The category of the products
          schema:
            type: string
      responses:
        '200':
          description: A list of products in the given category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Error fetching products
          
# --- Orders Routes ---
  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      description: Retrieve all orders
      operationId: getOrders
      responses:
        '200':
          description: A list of all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Error fetching orders
          
  /orders/user/{user_id}:
    get:
      tags:
        - Orders
      summary: Get all orders by user ID
      description: Retrieve all orders associated with a specific user.
      operationId: getOrdersByUserId
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: A list of orders for the specified user
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Order'
        '500':
          description: Error fetching orders

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get a specific order by ID
      description: Retrieve details for a specific order
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '500':
          description: Error fetching order

  /orders/{id}/items:
    get:
      tags:
        - Orders
      summary: Get all items for a specific order
      description: Retrieve all items associated with a specific order
      operationId: getOrderItems
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order
          schema:
            type: integer
      responses:
        '200':
          description: A list of order items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
        '500':
          description: Error fetching items for the order

 # --- Users Routes ---
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all users.
      operationId: getUsers
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Error fetching users
          
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a specific user by ID
      description: Retrieve a details for a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Error fetching user
        
    put:
      tags:
       - Users
      summary: Update a user by ID
      description: Update user details.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data. Name, email, and password are required.
        '404':
          description: User not found
        '500':
          description: Error updating user
          
    delete:
      tags:
        - Users
      summary: Delete a user by ID
      description: Delete a user from the system.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Error deleting user
  
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Create a new user account with name, email and password.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data. Name, email and password are required.
        '500':
          description: Error creating user

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      description: Authenticate a user and log them in using email and password.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data. Missing email or password.
        '401':
          description: Invalid email or password.
        '500':
          description: Error logging in.
          
# --- Carts Routes ---
  /carts:
    get:
      tags:
        - Carts
      summary: Get all carts
      description: Get a list of all carts.
      operationId: getCarts
      responses:
        '200':
          description: A list of all carts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '500':
          description: Error fetching carts
    post:
      tags:
        - Carts
      summary: Create a new cart
      operationId: createCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
              required:
                - user_id
      responses:
        '201':
          description: Cart created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '500':
          description: Error creating cart
          
  /carts/user/{user_id}:
    get:
      tags:
        - Carts
      summary: Get all carts for a user
      description: Get all carts for a specific user.
      operationId: getCartsByUserId
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of all carts for a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '500':
          description: Error fetching carts
      
  /carts/{id}:
    get:
      tags:
        - Carts
      summary: Get a cart by ID
      description: Get a specific cart by ID.
      operationId: getCartById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '404':
          description: Cart not found
        '500':
          description: Error fetching the cart
    
    delete:
      tags:
        - Carts
      summary: Delete a cart by ID
      description: Delete a specific cart by ID.
      operationId: deleteCart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cart deleted successfully
        '500':
          description: Error deleting the cart
          
  /carts/{cart_id}/items:
    get:
      tags:
        - Cart items
      summary: Get all items in a cart
      description: Get a list of all items in a specific cart.
      operationId: getCartItems
      parameters:
        - name: cart_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '500':
          description: Error fetching cart items
          
    post:
      tags:
        - Cart items
      summary: Add or update a cart item
      description: Add or update a cart item by cart_id
      operationId: addOrUpdateCartItem
      parameters:
        - name: cart_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                quantity:
                  type: integer
              required:
                 - product_id
                 - quantity
      responses:
        '200':
          description: Cart item added or updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '500':
          description: Error adding or updating item
          
  /carts/{cart_id}/checkout:
    post:
      tags:
        - Cart items
      summary: Checkout a cart
      description: Checkout a cart by ID
      operationId: checkoutCart
      parameters:
        - name: cart_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Checkout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  order:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Cart is empty
        '404':
          description: Cart not found
        '401':
          description: User not authenticated
        '500':
          description: Error processing checkout
    
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        stock_quantity:
          type: integer

    ProductInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        stock_quantity:
          type: integer
      required:
        - name
        - description
        - price
        - category
        - stock_quantity
        
    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        total_price:
          type: number
          format: float
        cart_id:
          type: integer
    
    OrderItem:
      type: object
      properties:
        id:
          type: integer
        order_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: float
        total_price:
          type: number
          format: float
    
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
    
    UserRegister:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
    
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
      required:
        - email
        - password
    
    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
      required:
        - name
        - email
        
    Cart:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
    
    CartItem:
      type: object
      properties:
        id:
          type: integer
        cart_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        total_price:
          type: number
          format: float